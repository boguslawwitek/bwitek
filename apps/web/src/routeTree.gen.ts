/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SkillsImport } from './routes/skills'
import { Route as ProjectsImport } from './routes/projects'
import { Route as LoginImport } from './routes/login'
import { Route as ContactImport } from './routes/contact'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AdminSkillsImport } from './routes/admin/skills'
import { Route as AdminProjectsImport } from './routes/admin/projects'
import { Route as AdminNavigationImport } from './routes/admin/navigation'
import { Route as AdminHomepageImport } from './routes/admin/homepage'
import { Route as AdminContactImport } from './routes/admin/contact'

// Create/Update Routes

const SkillsRoute = SkillsImport.update({
  id: '/skills',
  path: '/skills',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsRoute = ProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminSkillsRoute = AdminSkillsImport.update({
  id: '/skills',
  path: '/skills',
  getParentRoute: () => AdminRoute,
} as any)

const AdminProjectsRoute = AdminProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => AdminRoute,
} as any)

const AdminNavigationRoute = AdminNavigationImport.update({
  id: '/navigation',
  path: '/navigation',
  getParentRoute: () => AdminRoute,
} as any)

const AdminHomepageRoute = AdminHomepageImport.update({
  id: '/homepage',
  path: '/homepage',
  getParentRoute: () => AdminRoute,
} as any)

const AdminContactRoute = AdminContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => AdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsImport
      parentRoute: typeof rootRoute
    }
    '/skills': {
      id: '/skills'
      path: '/skills'
      fullPath: '/skills'
      preLoaderRoute: typeof SkillsImport
      parentRoute: typeof rootRoute
    }
    '/admin/contact': {
      id: '/admin/contact'
      path: '/contact'
      fullPath: '/admin/contact'
      preLoaderRoute: typeof AdminContactImport
      parentRoute: typeof AdminImport
    }
    '/admin/homepage': {
      id: '/admin/homepage'
      path: '/homepage'
      fullPath: '/admin/homepage'
      preLoaderRoute: typeof AdminHomepageImport
      parentRoute: typeof AdminImport
    }
    '/admin/navigation': {
      id: '/admin/navigation'
      path: '/navigation'
      fullPath: '/admin/navigation'
      preLoaderRoute: typeof AdminNavigationImport
      parentRoute: typeof AdminImport
    }
    '/admin/projects': {
      id: '/admin/projects'
      path: '/projects'
      fullPath: '/admin/projects'
      preLoaderRoute: typeof AdminProjectsImport
      parentRoute: typeof AdminImport
    }
    '/admin/skills': {
      id: '/admin/skills'
      path: '/skills'
      fullPath: '/admin/skills'
      preLoaderRoute: typeof AdminSkillsImport
      parentRoute: typeof AdminImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminContactRoute: typeof AdminContactRoute
  AdminHomepageRoute: typeof AdminHomepageRoute
  AdminNavigationRoute: typeof AdminNavigationRoute
  AdminProjectsRoute: typeof AdminProjectsRoute
  AdminSkillsRoute: typeof AdminSkillsRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminContactRoute: AdminContactRoute,
  AdminHomepageRoute: AdminHomepageRoute,
  AdminNavigationRoute: AdminNavigationRoute,
  AdminProjectsRoute: AdminProjectsRoute,
  AdminSkillsRoute: AdminSkillsRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/projects': typeof ProjectsRoute
  '/skills': typeof SkillsRoute
  '/admin/contact': typeof AdminContactRoute
  '/admin/homepage': typeof AdminHomepageRoute
  '/admin/navigation': typeof AdminNavigationRoute
  '/admin/projects': typeof AdminProjectsRoute
  '/admin/skills': typeof AdminSkillsRoute
  '/admin/': typeof AdminIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/projects': typeof ProjectsRoute
  '/skills': typeof SkillsRoute
  '/admin/contact': typeof AdminContactRoute
  '/admin/homepage': typeof AdminHomepageRoute
  '/admin/navigation': typeof AdminNavigationRoute
  '/admin/projects': typeof AdminProjectsRoute
  '/admin/skills': typeof AdminSkillsRoute
  '/admin': typeof AdminIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/projects': typeof ProjectsRoute
  '/skills': typeof SkillsRoute
  '/admin/contact': typeof AdminContactRoute
  '/admin/homepage': typeof AdminHomepageRoute
  '/admin/navigation': typeof AdminNavigationRoute
  '/admin/projects': typeof AdminProjectsRoute
  '/admin/skills': typeof AdminSkillsRoute
  '/admin/': typeof AdminIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/contact'
    | '/login'
    | '/projects'
    | '/skills'
    | '/admin/contact'
    | '/admin/homepage'
    | '/admin/navigation'
    | '/admin/projects'
    | '/admin/skills'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/contact'
    | '/login'
    | '/projects'
    | '/skills'
    | '/admin/contact'
    | '/admin/homepage'
    | '/admin/navigation'
    | '/admin/projects'
    | '/admin/skills'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/contact'
    | '/login'
    | '/projects'
    | '/skills'
    | '/admin/contact'
    | '/admin/homepage'
    | '/admin/navigation'
    | '/admin/projects'
    | '/admin/skills'
    | '/admin/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  ContactRoute: typeof ContactRoute
  LoginRoute: typeof LoginRoute
  ProjectsRoute: typeof ProjectsRoute
  SkillsRoute: typeof SkillsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  ContactRoute: ContactRoute,
  LoginRoute: LoginRoute,
  ProjectsRoute: ProjectsRoute,
  SkillsRoute: SkillsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/contact",
        "/login",
        "/projects",
        "/skills"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/contact",
        "/admin/homepage",
        "/admin/navigation",
        "/admin/projects",
        "/admin/skills",
        "/admin/"
      ]
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/projects": {
      "filePath": "projects.tsx"
    },
    "/skills": {
      "filePath": "skills.tsx"
    },
    "/admin/contact": {
      "filePath": "admin/contact.tsx",
      "parent": "/admin"
    },
    "/admin/homepage": {
      "filePath": "admin/homepage.tsx",
      "parent": "/admin"
    },
    "/admin/navigation": {
      "filePath": "admin/navigation.tsx",
      "parent": "/admin"
    },
    "/admin/projects": {
      "filePath": "admin/projects.tsx",
      "parent": "/admin"
    },
    "/admin/skills": {
      "filePath": "admin/skills.tsx",
      "parent": "/admin"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
